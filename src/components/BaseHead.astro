---
import "../styles/global.css";

import { Font } from "astro:assets";
import { SEO } from "astro-seo";
import { RIVE_WASM_URL, SITE_TITLE } from "@/consts";
import Preload, { type Props as PreloadProps } from "./Preload.astro";

export interface Props {
  title: string;
  description?: string;
  image?: string;
  templated?: boolean;
  authors?: string[];
  publishedTime?: string;
  preloadAssets?: (string | PreloadProps)[];
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const {
  title,
  preloadAssets = [],
  templated,
  authors,
  publishedTime,
  description,
  image = "/og.png",
} = Astro.props;
---

{
  preloadAssets.some((x) =>
    (typeof x === "string" ? x : x.href).endsWith(".riv"),
  ) && <Preload href={RIVE_WASM_URL} />
}

{
  preloadAssets.map((props) =>
    typeof props === "string" ? (
      <Preload href={props} />
    ) : (
      <Preload {...props} />
    ),
  )
}

<meta charset="utf-8" />

<meta name="viewport" content="width=device-width,initial-scale=1" />

<link rel="icon" href="/favicon.ico" />

<link rel="sitemap" href="/sitemap-index.xml" />

<Font cssVariable="--font-inter" preload />
<Font cssVariable="--font-outfit" preload />
<Font cssVariable="--font-damion" preload />

<SEO
  title={title}
  titleTemplate={!templated ? "%s" : `%s | ${SITE_TITLE}`}
  description={description}
  canonical={canonicalURL.href}
  openGraph={{
    basic: {
      title,
      type: "website",
      url: Astro.url,
      image: new URL(image, Astro.url).href,
    },
    optional: {
      siteName: SITE_TITLE,
      description,
    },
    article: {
      authors,
      publishedTime,
    },
  }}
  twitter={{
    card: "summary_large_image",
    title,
    description,
    image: new URL(image, Astro.url).href,
  }}
/>
